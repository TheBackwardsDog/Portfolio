{"version":3,"sources":["ResponsiveLayout.js","Components/Menu/Menu.js","Components/Hero/Hero.js","Components/Projects/projects.js","Components/Contact/contact.js","App.js","serviceWorker.js","index.js"],"names":["ResponsiveLayout","breakpoint","renderDesktop","renderMobile","renderTablet","useState","window","innerWidth","width","setWidth","innerHeight","height","setHeight","useEffect","handleResize","addEventListener","removeEventListener","console","log","Menu","props","position","setPosition","handleClick","e","target","event","srcElement","getEventTarget","tagName","setPage","getAttribute","setContent","id","onClick","div","initial","animate","left","style","data-location","data-navi","data-content","Hero","projects","contact","type","placeholder","name","App","page","className","home","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.129e7f2c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nconst ResponsiveLayout = ({ breakpoint, renderDesktop, renderMobile, renderTablet }) => {\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const [height, setHeight] = useState(window.innerHeight);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWidth(window.innerWidth); setHeight(window.innerHeight);\r\n        }\r\n        window.addEventListener('resize', handleResize);\r\n        return () => { window.removeEventListener('resize', handleResize) };\r\n    }, [])\r\n    console.log(width, height);\r\n    let render;\r\n    if (width < breakpoint){\r\n        render = renderMobile()\r\n    }\r\n    else {\r\n        if (width < height){\r\n            render = renderTablet()\r\n        }\r\n        else{\r\n            render = renderDesktop()\r\n        }\r\n    }\r\n    return(render)\r\n}\r\n\r\nexport default ResponsiveLayout\r\n","import React, { useState } from 'react'\r\nimport { motion } from 'framer-motion'\r\nimport './Menu.css'\r\n\r\nconst Menu = (props) => {\r\n    const [position, setPosition] = useState('0');\r\n    const getEventTarget = (e) => { e = e || window.event; return e.target || e.srcElement; };\r\n    const handleClick = (e) => {\r\n        const target = getEventTarget(e);                       //set target element to const target\r\n        if (target.tagName === 'LABEL') {                       //if the target is a Label\r\n            props.setPage(target.getAttribute('data-navi'));\r\n            props.setContent(target.getAttribute('data-content'));\r\n            setPosition(target.getAttribute('data-location'));\r\n        }\r\n    }\r\n    return (\r\n        <div id='Menu'>\r\n            <div id='menu-container' onClick={() => handleClick()}>\r\n                <motion.div initial={false} animate={{ left: position }} id='menu-selector' style={{ left: position }}></motion.div>\r\n                <label data-location='0' data-navi='home' data-content='hero'><h3>Home</h3></label>\r\n                <label data-location='25%' data-navi='home' data-content='about'><h3>About</h3></label>\r\n                <label data-location='50%' data-navi='projects'><h3>Projects</h3></label>\r\n                <label data-location='75%' data-navi='contact'><h3>Contact</h3></label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\n\r\nconst Hero = () => {\r\n    return (\r\n        <div>\r\n            sd\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hero\r\n","import React from 'react'\r\n\r\nconst projects = () => {\r\n    return (\r\n        <div>\r\n            proj\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default projects\r\n","import React, { useState } from 'react';\r\n\r\nconst contact = () => {\r\n    //const [buttonTxt, setButtonTxt] = useState('Send');\r\n    return (\r\n        <form>\r\n            <label></label>\r\n            <input type='text' placeholder='Name' name='name' />\r\n            <input type='text' placeholder='Subject' name='subject' />\r\n            <input type='email' placeholder='Email' name='mailFrom' />\r\n            <textarea placeholder='message'></textarea>\r\n    <button type='submit'>{}</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default contact\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport ResponsiveLayout from './ResponsiveLayout.js';\nimport Menu from './Components/Menu/Menu.js'\nimport Hero from './Components/Hero/Hero.js'\nimport Projects from './Components/Projects/projects.js'\nimport Contact from './Components/Contact/contact.js'\n\nfunction App() {\n  const [page, setPage] = useState('home'); const [content, setContent] = useState('hero');\n  return (\n    <div className=\"App\">\n      <ResponsiveLayout breakpoint={767}\n        renderDesktop={() => (\n          <div id='Desktop'>\n            <div id='content-container'>\n              Desktop\n              {\n                {\n                  home:(<Hero />),\n                  projects:(<Projects />),\n                  contact:(<Contact />)\n                }[page]\n              }\n            </div>\n            <Menu setPage={setPage} setContent={setContent}/>\n          </div>\n        )}\n        renderMobile={() => (\n          <div id='Mobile'>\n            <div id='content-container'>\n              mobile\n              {\n                {\n                  home:(<div>home</div>),\n                  projects:(<div>projects</div>),\n                  contact:(<div>content</div>)\n                }[page]\n              }\n            </div>\n            <Menu setPage={setPage} setContent={setContent}/>\n          </div>\n        )}\n        renderTablet={() => (\n          <div id='Tablet'>\n            <div id='content-container'>\n              tablet\n              {\n                {\n                  home:(<div>home</div>),\n                  projects:(<div>projects</div>),\n                  contact:(<div>content</div>)\n                }[page]\n              }\n            </div>\n            <Menu setPage={setPage} setContent={setContent}/>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}